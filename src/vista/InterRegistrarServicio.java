package vista;

import conexion.Conexion;
import controlador.Controlador_Servicio;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelo.Servicio;



public class InterRegistrarServicio extends javax.swing.JInternalFrame {
    
    int codServicio;
    int obtenerCodClasificacionCombo =0;
    

    public InterRegistrarServicio() {
        initComponents();
        this.setSize(new Dimension(625, 485));
        this.setTitle("Registrar Servicio");
        
        this.CargarTablaServicios();
        this.CargarComboClasificacion();
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton_guardar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txt_descripcion = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txt_precio = new javax.swing.JTextField();
        jComboBox_clasificacion = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_servicios = new javax.swing.JTable();
        jLabel_wallpaper = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton_actualizar = new javax.swing.JButton();
        jButton_eliminar = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Registrar Servicio");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Nombre:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, -1, -1));

        jButton_guardar.setBackground(new java.awt.Color(0, 204, 204));
        jButton_guardar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton_guardar.setText("Guardar");
        jButton_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_guardarActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_guardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 70, 90, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Descripci√≥n:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, -1, -1));

        txt_descripcion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(txt_descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 170, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Precio:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, -1, -1));

        txt_precio.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txt_precio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_precioActionPerformed(evt);
            }
        });
        getContentPane().add(txt_precio, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 170, -1));

        jComboBox_clasificacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Clasificacion:", "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(jComboBox_clasificacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, -1, -1));

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_servicios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_servicios);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 330, 230));

        jLabel_wallpaper.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(-220, -210, 630, 490));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 180, 350, 250));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_actualizar.setBackground(new java.awt.Color(51, 204, 0));
        jButton_actualizar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_actualizar.setForeground(new java.awt.Color(255, 255, 255));
        jButton_actualizar.setText("Actualizar");
        jButton_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_actualizarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jButton_eliminar.setBackground(new java.awt.Color(255, 51, 51));
        jButton_eliminar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_eliminar.setForeground(new java.awt.Color(255, 255, 255));
        jButton_eliminar.setText("Eliminar");
        jButton_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 90, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 130, 100));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_guardarActionPerformed

        Servicio servicio = new Servicio();
        Controlador_Servicio controlServicio = new Controlador_Servicio();
        
        String clasificacion="";
        clasificacion = jComboBox_clasificacion.getSelectedItem().toString().trim();

        //validamos camoos vacios
        if (txt_descripcion.getText().equals("") || txt_precio.getText().equals("") ) {
            JOptionPane.showMessageDialog(null, "Complete  todos los campos");
            txt_descripcion.setBackground(Color.red);
            txt_precio.setBackground(Color.red);
        } else {
            if (!controlServicio.existeServicio(txt_descripcion.getText().trim()) ) {
                if (clasificacion.equalsIgnoreCase("Seleccione Clasificacion:")) {
                    JOptionPane.showMessageDialog(null, "Seleccione Clasificacion");
                } else {
                    try {
                        
                        
                        servicio.setDescripcion(txt_descripcion.getText().trim());
                    
                            String precioTXT = "";
                            double Precio = 0.0;
                            precioTXT = txt_precio.getText().trim();
                            boolean aux = false;
                            /*
                            *Si el usuario ingresa , (coma) como punto decimal,
                            lo transformamos a punto (.)
                             */
                            for (int i = 0; i < precioTXT.length(); i++) {
                                if (precioTXT.charAt(i) == ',') {
                                    String precioNuevo = precioTXT.replace(",", ".");
                                    Precio = Double.parseDouble(precioNuevo);
                                    aux = true;
                                }
                            }
                            //evaluar la condicion
                            if (aux == true) {
                                servicio.setPrecio(Precio);
                            } else {
                                Precio = Double.parseDouble(precioTXT);
                                servicio.setPrecio(Precio);
                            }
                            
                            this.CodClasificacion();
                            servicio.setCodClasificacion(obtenerCodClasificacionCombo);
                            
                            
                            if (controlServicio.guardar(servicio)) {
                                JOptionPane.showMessageDialog(null, "Registro Guardado");
                                
                                txt_descripcion.setBackground(Color.green);
                                txt_precio.setBackground(Color.green);
                                this.CargarComboClasificacion();
                                this.Limpiar();
                                
                                } else {
                                JOptionPane.showMessageDialog(null, "Error al Guardar");
                            }
                            } catch (HeadlessException | NumberFormatException e) {
                            System.out.println("Error en: " + e);
                        }
                    }
            } else {
                JOptionPane.showMessageDialog(null, "El Servicio ya existe en la Base de Datos");
            }
          } 
           
            
                
    }//GEN-LAST:event_jButton_guardarActionPerformed

    private void txt_precioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_precioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_precioActionPerformed

    private void jButton_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_actualizarActionPerformed

        if (!txt_descripcion.getText().isEmpty()&&!txt_precio.getText().isEmpty()) {
            Servicio servicio = new Servicio();
            Controlador_Servicio controlServicio = new Controlador_Servicio();

            servicio.setDescripcion(txt_descripcion.getText().trim());
            String precioTXT = "";
                        double Precio = 0.0;
                        precioTXT = txt_precio.getText().trim();
                        boolean aux = false;
                        /*
                            *Si el usuario ingresa , (coma) como punto decimal,
                            lo transformamos a punto (.)
                         */
                        for (int i = 0; i < precioTXT.length(); i++) {
                            if (precioTXT.charAt(i) == ',') {
                                String precioNuevo = precioTXT.replace(",", ".");
                                Precio = Double.parseDouble(precioNuevo);
                                aux = true;
                            }
                        }
                        //evaluar la condicion
                        if (aux == true) {
                            servicio.setPrecio(Precio);
                        } else {
                            Precio = Double.parseDouble(precioTXT);
                            servicio.setPrecio(Precio);
                        }
            if (controlServicio.actualizar(servicio, codServicio)) {
                JOptionPane.showMessageDialog(null, "Servicio Actulizada");
                txt_descripcion.setText("");
                
                this.CargarTablaServicios();
            } else {
                JOptionPane.showMessageDialog(null, "Error al actualizar Servicio");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un Servicio");
        }
    }//GEN-LAST:event_jButton_actualizarActionPerformed

    private void jButton_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminarActionPerformed

        Controlador_Servicio controlServicio = new Controlador_Servicio();
        if (codServicio == 0) {
            JOptionPane.showMessageDialog(null, "¬°Seleccione un Servicio!");
        } else {
            if (!controlServicio.eliminar(codServicio)) {
                JOptionPane.showMessageDialog(null, "¬°Servicio Eliminado!");
                this.CargarTablaServicios();
                this.CargarComboClasificacion();
                this.Limpiar();
            } else {
                JOptionPane.showMessageDialog(null, "¬°Error al eliminar producto!");
            }
        }
        
    }//GEN-LAST:event_jButton_eliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_actualizar;
    private javax.swing.JButton jButton_eliminar;
    private javax.swing.JButton jButton_guardar;
    private javax.swing.JComboBox<String> jComboBox_clasificacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_servicios;
    private javax.swing.JTextField txt_descripcion;
    private javax.swing.JTextField txt_precio;
    // End of variables declaration//GEN-END:variables

    private void Limpiar() {
        txt_descripcion.setText("");
        txt_precio.setText("");

    }
    
    String nombreClasificacion = "";
    double precio = 0.0;

    private void CargarTablaServicios() {
        
        Connection con = Conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "select CodServicio,CodClasificacion, Descripcion, Precio  from Servicio";
        Statement st;
        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            InterRegistrarServicio.jTable_servicios = new JTable(model);
            InterRegistrarServicio.jScrollPane1.setViewportView(InterRegistrarServicio.jTable_servicios);

            model.addColumn("N");
            model.addColumn("Nombre");
            model.addColumn("Descripcion");
            model.addColumn("Precio");
            

            while (rs.next()) {
                Object fila[] = new Object[4];
                for (int i = 0; i < 4; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                model.addRow(fila);
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al llenar la tabla Servicios: " + e);
        }
        //evento para obtener campo al cual el usuario da click
        //y obtener la interfaz que mostrara la informacion general
        jTable_servicios.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = jTable_servicios.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    codServicio = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosCategoriaSeleccionada(codServicio);
                }
            }

            private void EnviarDatosCategoriaSeleccionada(int codServicio) {
                
                try {
            Connection con = Conexion.conectar();
            PreparedStatement pst = con.prepareStatement(
                    "select * from Servicio where CodServicio = '" + codServicio + "'");
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                txt_descripcion.setText(rs.getString("Descripcion"));
                txt_precio.setText(rs.getString("Precio"));
                int codClasi = rs.getInt("CodClasificacion");
                jComboBox_clasificacion.setSelectedItem(relacionarClasificacion(codClasi));
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al seleccionar Especialidad: " + e);
        }
                
            }

            private Object relacionarClasificacion(int codClasificacion) {
                
            String sql = "select Nombre from Clasificacion where CodClasificacion = '" + codClasificacion + "'";
            Statement st;
            try {
                Connection cn = Conexion.conectar();
                st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);
                while (rs.next()) {
                    nombreClasificacion = rs.getString("");
                }
                cn.close();

            } catch (SQLException e) {
                System.out.println("¬°Error al obtener el id de la categoria!");
            }
            return nombreClasificacion;
            }
            
            

            
        });
        
    }

    private int CodClasificacion() {
        
        String sql = "select * from Clasificacion where Nombre = '" + this.jComboBox_clasificacion.getSelectedItem() + "'";
        Statement st;
        try {
            Connection cn = Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                obtenerCodClasificacionCombo = rs.getInt("CodClasificacion");
            }
        } catch (SQLException e) {
            System.out.println("Error al obener Cod Clasificacion");
        }
        return obtenerCodClasificacionCombo;
        
    }

    private void CargarComboClasificacion() {
        
        Connection cn = Conexion.conectar();
        String sql = "select * from Clasificacion";
        Statement st;
        try {

            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_clasificacion.removeAllItems();
            jComboBox_clasificacion.addItem("Seleccione clasificacion:");
            while (rs.next()) {
                jComboBox_clasificacion.addItem(rs.getString("Nombre"));
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("¬°Error al cargar clasificacion!");
        }
        
    }


}
